==================== Delta Process =====================
Date: 2025-07-31T16:16:32.258Z
Process Flags ===========================================
logLevel=info
inspecJsonFile=..\..\2016\microsoft-sql-server-2016-database-stig-baseline\profile.json
xccdfXmlFile=..\..\..\DISA_STIGs_Library\SQL\SQL_Server_22\U_MS_SQL_Server_2022_Database_V1R1_Manual_STIG\U_MS_SQL_Server_2022_Database_STIG_V1R1_Manual-xccdf.xml
deltaOutputDir=updateControls
idType=rule
runMapControls=true
controlsDir=..\..\2016\microsoft-sql-server-2016-database-stig-baseline\controls


Mapping controls (using fuzzy logic - lower value = best match) from the old profile to the new profile

Mapping Process ===========================================================================
Processing New Control:  SV-271118
     New Control Title:  SQL Server must integrate with an organization-level authentication/access mechanism providing account management and automation for all users, groups, roles, and any other principals.
     Old Control Title:  SQL Server must protect against a user falsely repudiating by ensuring only clearly unique Active Directory user accounts can connect to the database.
    No Match Found for:  SV-213902 --> SV-271118
        Matching Score:  0.8854166666666666 

Processing New Control:  SV-271119
     New Control Title:  SQL Server must enforce approved authorizations for logical access to information and system resources in accordance with applicable access control policies.
     Old Control Title:  SQL Server must enforce approved authorizations for logical access to information and system resources in accordance with applicable access control policies.
  Best Match Candidate:  SV-213901 --> SV-271119
        Matching Score:  0.001

Processing New Control:  SV-271121
     New Control Title:  SQL Server must protect against a user falsely repudiating by using system-versioned tables (Temporal Tables).
     Old Control Title:  SQL Server must protect against a user falsely repudiating by use of system-versioned tables (Temporal Tables).
  Best Match Candidate:  SV-213903 --> SV-271121
        Matching Score:  0.047375

Processing New Control:  SV-271122
     New Control Title:  SQL Server must protect against a user falsely repudiating by ensuring databases are not in a trust relationship.
     Old Control Title:  SQL Server must protect against a user falsely repudiating by ensuring databases are not in a trust relationship.
  Best Match Candidate:  SV-213904 --> SV-271122
        Matching Score:  0.001

Processing New Control:  SV-271124
     New Control Title:  SQL Server must allow only the information system security manager (ISSM) (or individuals or roles appointed by the ISSM) to select which auditable events are to be audited.
     Old Control Title:  SQL Server must allow only the ISSM (or individuals or roles appointed by the ISSM) to select which auditable events are to be audited.
** Potential Mismatch **
  Best Match Candidate:  SV-213905 --> SV-271124
        Matching Score:  0.1827916666666666

Processing New Control:  SV-271143
     New Control Title:  SQL Server must limit privileges to change software modules, to include stored procedures, functions, and triggers, and links to software external to SQL Server.
     Old Control Title:  SQL Server must limit privileges to change software modules, to include stored procedures, functions, and triggers, and links to software external to SQL Server.
  Best Match Candidate:  SV-213907 --> SV-271143
        Matching Score:  0.0254

Processing New Control:  SV-271146
     New Control Title:  Database objects (including but not limited to tables, indexes, storage, stored procedures, functions, triggers, links to software external to SQL Server, etc.) must be owned by database/DBMS principals authorized for ownership.
     Old Control Title:  Database objects (including but not limited to tables, indexes, storage, stored procedures, functions, triggers, links to software external to SQL Server, etc.) must be owned by database/DBMS principals authorized for ownership.
  Best Match Candidate:  SV-213908 --> SV-271146
        Matching Score:  0.04478571428571428

Processing New Control:  SV-271147
     New Control Title:  The role(s)/group(s) used to modify database structure (including but not limited to tables, indexes, storage, etc.) and logic modules (stored procedures, functions, triggers, links to software external to SQL Server, etc.) must be restricted to authorized users.
     Old Control Title:  The role(s)/group(s) used to modify database structure (including but not necessarily limited to tables, indexes, storage, etc.) and logic modules (stored procedures, functions, triggers, links to software external to SQL Server, etc.) must be restricted to authorized users.
  Best Match Candidate:  SV-213909 --> SV-271147
        Matching Score:  0.078375

Processing New Control:  SV-271168
     New Control Title:  In the event of a system failure, hardware loss or disk failure, SQL Server must be able to restore necessary databases with least disruption to mission processes.
     Old Control Title:  In the event of a system failure, hardware loss or disk failure, SQL Server must be able to restore necessary databases with least disruption to mission processes.
  Best Match Candidate:  SV-213910 --> SV-271168
        Matching Score:  0.007050000000000001

Processing New Control:  SV-271169
     New Control Title:  The Database Master Key encryption password must meet DOD password complexity requirements.
     Old Control Title:  The Database Master Key encryption password must meet DOD password complexity requirements.
  Best Match Candidate:  SV-213911 --> SV-271169
        Matching Score:  0.001

Processing New Control:  SV-271170
     New Control Title:  The Database Master Key must be encrypted by the Service Master Key, where a Database Master Key is required and another encryption method has not been specified.
     Old Control Title:  The Database Master Key must be encrypted by the Service Master Key, where a Database Master Key is required and another encryption method has not been specified.
  Best Match Candidate:  SV-213912 --> SV-271170
        Matching Score:  0.007050000000000001

Processing New Control:  SV-271171
     New Control Title:  The certificate used for encryption must be backed up and stored in a secure location that is not on the SQL Server.
     Old Control Title:  The Certificate used for encryption must be backed up and stored in a secure location that is not on the SQL Server.
  Best Match Candidate:  SV-213913 --> SV-271171
        Matching Score:  0.001

Processing New Control:  SV-271172
     New Control Title:  SQL Server must isolate security functions from nonsecurity functions.
     Old Control Title:  SQL Server must isolate security functions from non-security functions.
  Best Match Candidate:  SV-213914 --> SV-271172
        Matching Score:  0.021166666666666667

Processing New Control:  SV-271173
     New Control Title:  Database contents must be protected from unauthorized and unintended information transfer by enforcement of a data transfer policy.
     Old Control Title:  Database contents must be protected from unauthorized and unintended information transfer by enforcement of a data-transfer policy.
  Best Match Candidate:  SV-213915 --> SV-271173
        Matching Score:  0.0131

Processing New Control:  SV-271176
     New Control Title:  SQL Server must check the validity of all data inputs except those specifically identified by the organization.
     Old Control Title:  SQL Server must check the validity of all data inputs except those specifically identified by the organization.
  Best Match Candidate:  SV-213916 --> SV-271176
        Matching Score:  0.001

Processing New Control:  SV-271179
     New Control Title:  SQL Server must provide nonprivileged users with error messages that provide information necessary for corrective actions without revealing information that could be exploited by adversaries.
     Old Control Title:  SQL Server must provide non-privileged users with error messages that provide information necessary for corrective actions without revealing information that could be exploited by adversaries.
  Best Match Candidate:  SV-213917 --> SV-271179
        Matching Score:  0.006041666666666667

Processing New Control:  SV-271184
     New Control Title:  SQL Server must associate organization-defined types of security labels having organization-defined security label values with information in process, transit, or storage.
     Old Control Title:  SQL Server must associate organization-defined types of security labels having organization-defined security label values with information in storage.
    No Match Found for:  SV-213918 --> SV-271184
        Matching Score:  0.3440833333333333 

Processing New Control:  SV-271186
     New Control Title:  SQL Server must enforce discretionary access control (DAC) policies, as defined by the data owner, over defined subjects and objects.
     Old Control Title:  SQL Server must enforce discretionary access control policies, as defined by the data owner, over defined subjects and objects.
  Best Match Candidate:  SV-213921 --> SV-271186
        Matching Score:  0.047375

Processing New Control:  SV-271188
     New Control Title:  Execution of stored procedures and functions that use execute as must be restricted to necessary cases only.
     Old Control Title:  Execution of stored procedures and functions that utilize execute as must be restricted to necessary cases only.
  Best Match Candidate:  SV-213922 --> SV-271188
        Matching Score:  0.0398125

Processing New Control:  SV-271195
     New Control Title:  SQL Server must enforce access restrictions associated with changes to the configuration of the database(s).
     Old Control Title:  SQL Server must enforce access restrictions associated with changes to the configuration of the database(s).
  Best Match Candidate:  SV-213924 --> SV-271195
        Matching Score:  0.0085625

Processing New Control:  SV-271199
     New Control Title:  SQL Server must use NSA-approved cryptography to protect classified information in accordance with the data owner’s requirements.
     Old Control Title:  SQL Server must use NSA-approved cryptography to protect classified information in accordance with the data owners requirements.
  Best Match Candidate:  SV-251040 --> SV-271199
        Matching Score:  0.0085625

Processing New Control:  SV-271201
     New Control Title:  SQL Server must implement cryptographic mechanisms to prevent unauthorized modification or disclosure of organization-defined information at rest (to include, at a minimum, PII and classified information) on organization-defined information system components.
     Old Control Title:  SQL Server must implement cryptographic mechanisms to prevent unauthorized modification of organization-defined information at rest (to include, at a minimum, PII and classified information) on organization-defined information system components.
  Best Match Candidate:  SV-213926 --> SV-271201
        Matching Score:  0.062875

Mapping Results ===========================================================================
	Old Control -> New Control
	   SV-213901 -> SV-271119
	   SV-213903 -> SV-271121
	   SV-213904 -> SV-271122
	   SV-213905 -> SV-271124
	   SV-213907 -> SV-271143
	   SV-213908 -> SV-271146
	   SV-213909 -> SV-271147
	   SV-213910 -> SV-271168
	   SV-213911 -> SV-271169
	   SV-213912 -> SV-271170
	   SV-213913 -> SV-271171
	   SV-213914 -> SV-271172
	   SV-213915 -> SV-271173
	   SV-213916 -> SV-271176
	   SV-213917 -> SV-271179
	   SV-213921 -> SV-271186
	   SV-213922 -> SV-271188
	   SV-213924 -> SV-271195
	   SV-251040 -> SV-271199
	   SV-213926 -> SV-271201
Total Mapped Controls:  20

Control Counts ===========================
Total Controls Available for Delta:  27
     Total Controls Found on XCCDF:  22

Match Statistics =========================
                    Match Controls:  19
        Possible Mismatch Controls:  1
          Duplicate Match Controls:  0
                 No Match Controls:  2
                New XCDDF Controls:  0

Statistics Validation =============================================
Match + Mismatch = Total Mapped Controls:  (19+1=20) true
  Total Processed = Total XCCDF Controls:  (19+1+0+2+0=22) true


Updating Controls ===========================================================================
Mapping (From --> To):  SV-213901 --> SV-271119
   Processing control:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213901.rb
    Processed control:  \microsoft-sql-server-2016-database-stig-baseline\mapped_controls\SV-213901.rb
  Mapped control file:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213901.rb to reference ID SV-271119
     New control name:  SV-271119.rb

Mapping (From --> To):  SV-213903 --> SV-271121
   Processing control:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213903.rb
    Processed control:  \microsoft-sql-server-2016-database-stig-baseline\mapped_controls\SV-213903.rb
  Mapped control file:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213903.rb to reference ID SV-271121
     New control name:  SV-271121.rb

Mapping (From --> To):  SV-213904 --> SV-271122
   Processing control:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213904.rb
    Processed control:  \microsoft-sql-server-2016-database-stig-baseline\mapped_controls\SV-213904.rb
  Mapped control file:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213904.rb to reference ID SV-271122
     New control name:  SV-271122.rb

Mapping (From --> To):  SV-213905 --> SV-271124
   Processing control:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213905.rb
    Processed control:  \microsoft-sql-server-2016-database-stig-baseline\mapped_controls\SV-213905.rb
  Mapped control file:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213905.rb to reference ID SV-271124
     New control name:  SV-271124.rb

Mapping (From --> To):  SV-213907 --> SV-271143
   Processing control:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213907.rb
    Processed control:  \microsoft-sql-server-2016-database-stig-baseline\mapped_controls\SV-213907.rb
  Mapped control file:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213907.rb to reference ID SV-271143
     New control name:  SV-271143.rb

Mapping (From --> To):  SV-213908 --> SV-271146
   Processing control:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213908.rb
    Processed control:  \microsoft-sql-server-2016-database-stig-baseline\mapped_controls\SV-213908.rb
  Mapped control file:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213908.rb to reference ID SV-271146
     New control name:  SV-271146.rb

Mapping (From --> To):  SV-213909 --> SV-271147
   Processing control:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213909.rb
    Processed control:  \microsoft-sql-server-2016-database-stig-baseline\mapped_controls\SV-213909.rb
  Mapped control file:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213909.rb to reference ID SV-271147
     New control name:  SV-271147.rb

Mapping (From --> To):  SV-213910 --> SV-271168
   Processing control:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213910.rb
    Processed control:  \microsoft-sql-server-2016-database-stig-baseline\mapped_controls\SV-213910.rb
  Mapped control file:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213910.rb to reference ID SV-271168
     New control name:  SV-271168.rb

Mapping (From --> To):  SV-213911 --> SV-271169
   Processing control:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213911.rb
    Processed control:  \microsoft-sql-server-2016-database-stig-baseline\mapped_controls\SV-213911.rb
  Mapped control file:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213911.rb to reference ID SV-271169
     New control name:  SV-271169.rb

Mapping (From --> To):  SV-213912 --> SV-271170
   Processing control:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213912.rb
    Processed control:  \microsoft-sql-server-2016-database-stig-baseline\mapped_controls\SV-213912.rb
  Mapped control file:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213912.rb to reference ID SV-271170
     New control name:  SV-271170.rb

Mapping (From --> To):  SV-213913 --> SV-271171
   Processing control:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213913.rb
    Processed control:  \microsoft-sql-server-2016-database-stig-baseline\mapped_controls\SV-213913.rb
  Mapped control file:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213913.rb to reference ID SV-271171
     New control name:  SV-271171.rb

Mapping (From --> To):  SV-213914 --> SV-271172
   Processing control:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213914.rb
    Processed control:  \microsoft-sql-server-2016-database-stig-baseline\mapped_controls\SV-213914.rb
  Mapped control file:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213914.rb to reference ID SV-271172
     New control name:  SV-271172.rb

Mapping (From --> To):  SV-213915 --> SV-271173
   Processing control:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213915.rb
    Processed control:  \microsoft-sql-server-2016-database-stig-baseline\mapped_controls\SV-213915.rb
  Mapped control file:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213915.rb to reference ID SV-271173
     New control name:  SV-271173.rb

Mapping (From --> To):  SV-213916 --> SV-271176
   Processing control:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213916.rb
    Processed control:  \microsoft-sql-server-2016-database-stig-baseline\mapped_controls\SV-213916.rb
  Mapped control file:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213916.rb to reference ID SV-271176
     New control name:  SV-271176.rb

Mapping (From --> To):  SV-213917 --> SV-271179
   Processing control:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213917.rb
    Processed control:  \microsoft-sql-server-2016-database-stig-baseline\mapped_controls\SV-213917.rb
  Mapped control file:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213917.rb to reference ID SV-271179
     New control name:  SV-271179.rb

Mapping (From --> To):  SV-213921 --> SV-271186
   Processing control:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213921.rb
    Processed control:  \microsoft-sql-server-2016-database-stig-baseline\mapped_controls\SV-213921.rb
  Mapped control file:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213921.rb to reference ID SV-271186
     New control name:  SV-271186.rb

Mapping (From --> To):  SV-213922 --> SV-271188
   Processing control:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213922.rb
    Processed control:  \microsoft-sql-server-2016-database-stig-baseline\mapped_controls\SV-213922.rb
  Mapped control file:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213922.rb to reference ID SV-271188
     New control name:  SV-271188.rb

Mapping (From --> To):  SV-213924 --> SV-271195
   Processing control:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213924.rb
    Processed control:  \microsoft-sql-server-2016-database-stig-baseline\mapped_controls\SV-213924.rb
  Mapped control file:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213924.rb to reference ID SV-271195
     New control name:  SV-271195.rb

Mapping (From --> To):  SV-251040 --> SV-271199
   Processing control:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-251040.rb
    Processed control:  \microsoft-sql-server-2016-database-stig-baseline\mapped_controls\SV-251040.rb
  Mapped control file:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-251040.rb to reference ID SV-271199
     New control name:  SV-271199.rb

Mapping (From --> To):  SV-213926 --> SV-271201
   Processing control:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213926.rb
    Processed control:  \microsoft-sql-server-2016-database-stig-baseline\mapped_controls\SV-213926.rb
  Mapped control file:  \microsoft-sql-server-2016-database-stig-baseline\controls\SV-213926.rb to reference ID SV-271201
     New control name:  SV-271201.rb

Update Results ===========================================================================

## Automatic Update:  -> 

### New Controls:
+   SV-271118 - SQL Server must integrate with an organization-level authentication&#x2F;access mechanism providing account management and automation for all users, groups, roles, and any other principals.
+   SV-271184 - SQL Server must associate organization-defined types of security labels having organization-defined security label values with information in process, transit, or storage.


### Updated Check/Fixes:
#### Checks:
<details open>
  <summary>Click to expand.</summary>
SV-271119:
Old: 
```
Review the system documentation to determine the required levels of protection for securables in the database by type of user. 

If the database is tempdb, this is Not Applicable.

Review the permissions actually in place in the database. 

If the actual permissions do not match the documented requirements, this is a finding.

Use the supplemental file "Database permission assignments to users and roles.sql".

```

Updated:
```
If the database is tempdb, this is Not Applicable.

Check SQL Server settings to determine whether users are restricted from accessing objects and data they are not authorized to access.

Review the system documentation to determine the required levels of protection for securables in the database by type of user. 

Review the permissions in place in the database. 

If the permissions do not match the documented requirements, this is a finding.

Use the supplemental file "Database permission assignments to users and roles.sql".

```
---
SV-271121:
Old: 
```
Check the server documentation to determine if collecting and keeping historical versions of a table is required.

If collecting and keeping historical versions of a table is NOT required, this is not a finding.

Find all of the temporal tables in the database using the following query:

SELECT SCHEMA_NAME(T.schema_id) AS schema_name, T.name AS table_name, T.temporal_type_desc, SCHEMA_NAME(H.schema_id) + '.' + H.name AS history_table
FROM sys.tables T
JOIN sys.tables H ON T.history_table_id = H.object_id
WHERE T.temporal_type != 0
ORDER BY schema_name, table_name

Using the system documentation, determine which tables are required to be temporal tables.

If any tables listed in the documentation are not in the list created by running the above statement, this is a finding.

Ensure a field exists documenting the login and/or user who last modified the record. 

If this does not exist, this is a finding.

```

Updated:
```
Check the server documentation to determine if collecting and keeping historical versions of a table is required.

If collecting and keeping historical versions of a table is NOT required, this is not a finding.

Find all of the temporal tables in the database using the following query:

SELECT SCHEMA_NAME(T.schema_id) AS schema_name, T.name AS table_name, T.temporal_type_desc, SCHEMA_NAME(H.schema_id) + '.' + H.name AS history_table
FROM sys.tables T
JOIN sys.tables H ON T.history_table_id = H.object_id
WHERE T.temporal_type != 0
ORDER BY schema_name, table_name

Using the system documentation, determine which tables are required to be temporal tables.

If any tables listed in the documentation are not in the list created by running the above statement, this is a finding.

Verify that a field exists documenting the login and/or user who last modified the record. If this does not exist, this is a finding.

Review the system documentation to determine the history retention period.

Navigate to the table in Object Explorer. Right-click on the table and then select Script Table As >> CREATE To >> New Query Editor Window.

Locate the line that contains "SYSTEM_VERSIONING".

Locate the text that states "HISTORY_RETENTION_PERIOD".

If this text is missing or is set to a value less than the documented history retention period, this is a finding.

```
---
SV-271122:
Old: 
```
If the database being reviewed is MSDB, trustworthy is required to be enabled, and therefore this is not a finding.

Execute the following query:

SELECT SUSER_SNAME(d.owner_sid) AS DatabaseOwner,
CASE
WHEN d.is_trustworthy_on = 0 THEN 'No'
WHEN d.is_trustworthy_on = 1 THEN 'Yes'
END AS IsTrustworthy,
CASE
WHEN role.name IN ('sysadmin','securityadmin')
OR permission.permission_name = 'CONTROL SERVER'
THEN 'YES'
ELSE 'No'
END AS 'IsOwnerPrivileged'
FROM sys.databases d
LEFT JOIN sys.server_principals login ON d.owner_sid = login.sid
LEFT JOIN sys.server_role_members rm ON login.principal_id = rm.member_principal_id
LEFT JOIN sys.server_principals role ON rm.role_principal_id = role.principal_id
LEFT JOIN sys.server_permissions permission ON login.principal_id = permission.grantee_principal_id
WHERE d.name = DB_NAME()

If trustworthy is not enabled, this is not a finding.

If trustworthy is enabled and the database owner is not a privileged account, this is not a finding.

If trustworthy is enabled and the database owner is a privileged account, review the system documentation to determine if the trustworthy property is required and authorized. If this is not documented, this is a finding.

```

Updated:
```
If the database being reviewed is MSDB, trustworthy is required to be enabled, and therefore this is not a finding.

Execute the following query:

SELECT
[DatabaseName] = d.name
,[DatabaseOwner] = login.name
,[IsTrustworthy] = CASE
WHEN d.is_trustworthy_on = 0 THEN 'No'
WHEN d.is_trustworthy_on = 1 THEN 'Yes'
END
,[IsOwnerPrivilege] = CASE
WHEN role.name IN ('sysadmin','securityadmin')
OR permission.permission_name = 'CONTROL SERVER'
THEN 'YES'
ELSE 'No'
END
FROM sys.databases d
LEFT JOIN sys.server_principals login ON d.owner_sid = login.sid
LEFT JOIN sys.server_role_members rm ON login.principal_id = rm.member_principal_id
LEFT JOIN sys.server_principals role ON rm.role_principal_id = role.principal_id
LEFT JOIN sys.server_permissions permission ON login.principal_id = permission.grantee_principal_id
WHERE d.name <> 'msdb'

If trustworthy is not enabled, this is not a finding.

If trustworthy is enabled and the database owner is not a privileged account, this is not a finding.

If trustworthy is enabled and the database owner is a privileged account, review the system documentation to determine if the trustworthy property is required and authorized. If this is not documented, this is a finding.

```
---
SV-271146:
Old: 
```
Review system documentation to identify SQL Server accounts authorized to own database objects. 

If the SQL Server database ownership list does not exist or needs to be updated, this is a finding. 

The following query can be of use in making this determination: 

;with objects_cte as
(SELECT o.name, o.type_desc,
   CASE
    WHEN o.principal_id is null then s.principal_id
     ELSE o.principal_id
    END as principal_id
 FROM sys.objects o
 INNER JOIN sys.schemas s
 ON o.schema_id = s.schema_id
 WHERE o.is_ms_shipped = 0
)
SELECT cte.name, cte.type_desc, dp.name as ObjectOwner 
FROM objects_cte cte
INNER JOIN sys.database_principals dp
ON cte.principal_id = dp.principal_id
ORDER BY dp.name, cte.name

If any of the listed owners is not authorized, this is a finding.

```

Updated:
```
Review system documentation to identify SQL Server accounts authorized to own database objects. 

If the SQL Server database ownership list does not exist or needs to be updated, this is a finding. 

Use the following query to make this determination: 

;with objects_cte as
(SELECT o.name, o.type_desc,
   CASE
    WHEN o.principal_id is null then s.principal_id
     ELSE o.principal_id
    END as principal_id
 FROM sys.objects o
 INNER JOIN sys.schemas s
 ON o.schema_id = s.schema_id
 WHERE o.is_ms_shipped = 0
)
SELECT cte.name, cte.type_desc, dp.name as ObjectOwner 
FROM objects_cte cte
INNER JOIN sys.database_principals dp
ON cte.principal_id = dp.principal_id
ORDER BY dp.name, cte.name

If any of the listed owners are not authorized, this is a finding.

```
---
SV-271147:
Old: 
```
Obtain a listing of users and roles who are authorized to modify database structure and logic modules from the server documentation.

Execute the following query:
SELECT P.type_desc AS principal_type, P.name AS principal_name, O.type_desc,
   CASE class
    WHEN 0 THEN DB_NAME()
    WHEN 1 THEN OBJECT_SCHEMA_NAME(major_id) + '.' + OBJECT_NAME(major_id)
    WHEN 3 THEN SCHEMA_NAME(major_id)
      ELSE class_desc + '(' + CAST(major_id AS nvarchar) + ')'
   END AS securable_name, DP.state_desc, DP.permission_name
FROM sys.database_permissions DP
JOIN sys.database_principals P ON DP.grantee_principal_id = P.principal_id
LEFT OUTER JOIN sys.all_objects O ON O.object_id = DP.major_id AND O.type IN ('TR','TA','P','X','RF','PC','IF','FN','TF','U')
WHERE DP.type IN ('AL','ALTG') AND DP.class IN (0, 1, 53)

SELECT R.name AS role_name, M.type_desc AS principal_type, M.name AS principal_name
FROM sys.database_principals R
JOIN sys.database_role_members DRM ON R.principal_id = DRM.role_principal_id
JOIN sys.database_principals M ON DRM.member_principal_id = M.principal_id
WHERE R.name IN ('db_ddladmin','db_owner')
AND M.name != 'dbo'

If any users or role permissions returned are not authorized to modify the specified object or type, this is a finding.

If any user or role membership is not authorized, this is a finding.

```

Updated:
```
If the SQL Server instance supports only software development, experimentation, and/or developer-level testing (i.e., excluding production systems, integration testing, stress testing, and user acceptance testing), this is not a finding. 

Obtain a listing of users and roles who are authorized to create, alter, or replace logic modules from the server documentation.

In each user database, execute the following query:

SELECT P.type_desc AS principal_type, P.name AS principal_name,
O.type_desc,
CASE class
WHEN 0 THEN DB_NAME()
WHEN 1 THEN OBJECT_SCHEMA_NAME(major_id) + '.' + OBJECT_NAME(major_id)
WHEN 3 THEN SCHEMA_NAME(major_id)
ELSE class_desc + '(' + CAST(major_id AS nvarchar) + ')'
END AS securable_name, DP.state_desc, DP.permission_name
FROM sys.database_permissions DP
JOIN sys.database_principals P ON DP.grantee_principal_id = P.principal_id
LEFT OUTER JOIN sys.all_objects O ON O.object_id = DP.major_id AND O.type IN ('TR','TA','P','X','RF','PC','IF','FN','TF','U')
WHERE DP.type IN ('AL','ALTG') AND DP.class IN (0, 1, 53)

SELECT R.name AS role_name, M.type_desc AS principal_type, M.name AS principal_name
FROM sys.database_principals R
JOIN sys.database_role_members DRM ON R.principal_id = DRM.role_principal_id
JOIN sys.database_principals M ON DRM.member_principal_id = M.principal_id
WHERE R.name IN ('db_ddladmin','db_owner')
AND M.name <> 'dbo'

If any users or role permissions returned are not authorized to modify the specified object or type, this is a finding. 

If any user or role membership is not authorized, this is a finding.

```
---
SV-271168:
Old: 
```
Review the system security plan (SSP) to determine whether the database is static, the recovery model to be used, the backup schedule, and the plan for testing database restoration.

If the SSP does not state that the database is static, assume that it is not static. If any of the other information is absent, this is a finding. 

If the database is not static, and the documented recovery model is Bulk Logged, but the justification and authorization for this are not documented, this is a finding. 

Run the following to determine Recovery Model:

USE [master]
GO

SELECT name, recovery_model_desc
FROM sys.databases
ORDER BY name

If the recovery model description does not match the documented recovery model, this is a finding. 

Review the jobs set up to implement the backup plan. If they are absent, this is a finding. 

Check the history of the backups by running the following query.  It checks the last 30 days of backups by database.
USE [msdb]
GO

SELECT database_name, 
   CASE type
    WHEN 'D' THEN 'Full'
    WHEN 'I' THEN 'Differential'
    WHEN 'L' THEN 'Log'
   ELSE type
   END AS backup_type,
 is_copy_only,
 backup_start_date, backup_finish_date
FROM dbo.backupset
WHERE backup_start_date >= dateadd(day, - 30, getdate()) 
ORDER BY database_name, backup_start_date DESC

If the history indicates a pattern of job failures by missing or gaps in backups, this is a finding. 

Review evidence that database recovery is tested annually or more often, and that the most recent test was successful. If not, this is a finding.

```

Updated:
```
Review the system documentation to determine whether the database is static, the recovery model to be used, the backup schedule, and the plan for testing database restoration.

If the documentation does not state that the database is static, assume that it is not static. If any of the other information is absent, this is a finding. 

If the database is not static, and the documented recovery model is Bulk Logged, but the justification and authorization for this are not documented, this is a finding. 

Run the following to determine Recovery Model:

USE [master]
GO

SELECT name, recovery_model_desc
FROM sys.databases
ORDER BY name

If the recovery model description does not match the documented recovery model, this is a finding. 

Review the jobs set up to implement the backup plan. If they are absent, this is a finding. 

Check the history of the backups by running the following query. It checks the last 30 days of backups by database.

USE [msdb]
GO

SELECT database_name, 
   CASE type
    WHEN 'D' THEN 'Full'
    WHEN 'I' THEN 'Differential'
    WHEN 'L' THEN 'Log'
   ELSE type
   END AS backup_type,
 is_copy_only,
 backup_start_date, backup_finish_date
FROM dbo.backupset
WHERE backup_start_date >= dateadd(day, - 30, getdate()) 
ORDER BY database_name, backup_start_date DESC

If the history indicates a pattern of job failures by missing or gaps in backups, this is a finding. 

Review evidence that database recovery is tested annually or more often, and that the most recent test was successful. If not, this is a finding.

```
---
SV-271169:
Old: 
```
From the query prompt: 

SELECT name 
FROM [master].sys.databases 
WHERE state = 0 

Repeat for each database: 
From the query prompt: 
USE [database name] 
SELECT COUNT(name) 
FROM sys.symmetric_keys s, sys.key_encryptions k 
WHERE s.name = '##MS_DatabaseMasterKey##' 
AND s.symmetric_key_id = k.key_id 
AND k.crypt_type in ('ESKP', 'ESP2', 'ESP3')

If the value returned is zero, this is not applicable.

If the value returned is greater than zero, a Database Master Key exists and is encrypted with a password. 

Review procedures and evidence of password requirements used to encrypt Database Master Keys. 

If the passwords are not required to meet DoD password standards, currently a minimum of 15 characters with at least 1 upper-case character, 1 lower-case character, 1 special character, and 1 numeric character, and at least 8 characters changed from the previous password, this is a finding.

```

Updated:
```
From the query prompt: 

SELECT name 
FROM [master].sys.databases 
WHERE state = 0 

Repeat for each database: 
From the query prompt: 

USE [database name] 
SELECT COUNT(name) 
FROM sys.symmetric_keys s, sys.key_encryptions k 
WHERE s.name = '##MS_DatabaseMasterKey##' 
AND s.symmetric_key_id = k.key_id 
AND k.crypt_type in ('ESKP', 'ESP2', 'ESP3')

If the value returned is zero, this is not applicable.

If the value returned is greater than zero, a Database Master Key exists and is encrypted with a password. 

Review procedures and evidence of password requirements used to encrypt Database Master Keys. 

If the passwords do not meet DOD password standards, this is a finding.

```
---
SV-271170:
Old: 
```
If no databases require encryption, this is not a finding.

From the query prompt:
SELECT name
FROM [master].sys.databases
WHERE is_master_key_encrypted_by_server = 1
AND owner_sid <> 1
AND state = 0;
(Note that this query assumes that the [sa] account is not used as the owner of application databases, in keeping with other STIG guidance.  If this is not the case, modify the query accordingly.)

If no databases are returned by the query, this is not a finding.

For any databases returned, verify in the System Security Plan that encryption of the Database Master Key using the Service Master Key is acceptable and approved by the Information Owner, and the encrypted data does not require additional protections to deter or detect DBA access. If not approved, this is a finding.

If approved and additional protections are required, then verify the additional requirements are in place in accordance with the System Security Plan. These may include additional auditing on access of the Database Master Key with alerts or other automated monitoring.

If the additional requirements are not in place, this is a finding.

```

Updated:
```
If no databases require encryption, this is not a finding. 

From the query prompt: 

SELECT name 
FROM [master].sys.databases 
WHERE is_master_key_encrypted_by_server = 1 
AND state = 0; 

If no databases are returned by the query, this is not a finding. 

For any databases returned, verify in the System Security Plan that encryption of the Database Master Key using the Service Master Key is acceptable and approved by the Information Owner, and the encrypted data does not require additional protections to deter or detect DBA access. If not approved, this is a finding. 

If approved and additional protections are required, verify the additional requirements are in place in accordance with the System Security Plan. These may include additional auditing on access of the Database Master Key with alerts or other automated monitoring. 

If the additional requirements are not in place, this is a finding.

```
---
SV-271171:
Old: 
```
If the application owner and authorizing official have determined that encryption of data at rest is not required, this is not a finding.

Review procedures for and evidence of backup of the Certificate used for encryption in the System Security Plan. 

If the procedures or evidence does not exist, this is a finding. 

If the procedures do not indicate that a backup of the Certificate used for encryption is stored in a secure location that is not on the SQL Server, this is a finding. 

If procedures do not indicate access restrictions to the Certificate backup, this is a finding.

```

Updated:
```
If the application owner and authorizing official have determined that encryption of data at rest is not required, this is not a finding.

Review procedures for and evidence of backup of the certificate used for encryption in the System Security Plan. 

If the procedures or evidence does not exist, this is a finding. 

If the procedures do not indicate that a backup of the certificate used for encryption is stored in a secure location that is not on the SQL Server, this is a finding. 

If procedures do not indicate access restrictions to the certificate backup, this is a finding.

```
---
SV-271172:
Old: 
```
Determine elements of security functionality (lists of permissions, additional authentication information, stored procedures, application specific auditing, etc.) that are being housed inside SQL server.

For any elements found, check SQL Server to determine if these objects or code implementing security functionality are located in a separate security domain, such as a separate database, schema, or table created specifically for security functionality.

If the database is a SQL Server default database (master, msdb, model, tempdb), this is NA.

Run the following query to list all the user-defined databases:

SELECT Name 
FROM sys.databases 
WHERE database_id > 4 
ORDER BY 1;

Review the database structure to determine where security related functionality is stored. If security-related database objects or code are not kept separate, this is a finding.

```

Updated:
```
Determine elements of security functionality (lists of permissions, additional authentication information, stored procedures, application specific auditing, etc.) being housed inside SQL Server.

For any elements found, check SQL Server to determine if these objects or code implementing security functionality are located in a separate security domain, such as a separate database, schema, or table created specifically for security functionality.

Review the system documentation to determine if the necessary database changes cannot be made and that the blockers are also documented. If the necessary changes are documented as not possible, this is not a finding.

Review the database structure to determine where security-related functionality is stored. If security-related database objects or code is not kept separate, this is a finding.

```
---
SV-271176:
Old: 
```
Review DBMS code (stored procedures, functions, triggers), application code, settings, column and field definitions, and constraints to determine whether the database is protected against invalid input.

If code exists that allows invalid data to be acted upon or input into the database, this is a finding.

If column/field definitions are not reflective of the data, this is a finding.

If columns/fields do not contain constraints and validity checking where required, this is a finding.

Where a column/field is noted in the system documentation as necessarily free-form, even though its name and context suggest that it should be strongly typed and constrained, the absence of these protections is not a finding.

Where a column/field is clearly identified by name, caption or context as Notes, Comments, Description, Text, etc., the absence of these protections is not a finding.

```

Updated:
```
Review SQL Server code (stored procedures, functions, triggers), application code, settings, column and field definitions, and constraints to determine whether the database is protected against invalid input. If code exists that allows invalid data to be acted upon or input into the database, this is a finding. 

If column/field definitions do not reflect the data, this is a finding. 

If columns/fields do not contain constraints and validity checking where required, this is a finding. 

Where a column/field is noted in the system documentation as necessarily free-form, even though its name and context suggest that it should be strongly typed and constrained, the absence of these protections is not a finding. 

Where a column/field is clearly identified by name, caption, or context as Notes, Comments, Description, Text, etc., the absence of these protections is not a finding.

```
---
SV-271188:
Old: 
```
Review the system documentation to obtain a listing of stored procedures and functions that utilize impersonation. Execute the following query:


SELECT S.name AS schema_name, O.name AS module_name,
USER_NAME(
CASE M.execute_as_principal_id
WHEN -2 THEN COALESCE(O.principal_id, S.principal_id)
ELSE M.execute_as_principal_id
END
) AS execute_as
FROM sys.sql_modules M
JOIN sys.objects O ON M.object_id = O.object_id
JOIN sys.schemas S ON O.schema_id = S.schema_id
WHERE execute_as_principal_id IS NOT NULL
and       o.name not in 
(             
'fn_sysdac_get_username',
                             'fn_sysutility_ucp_get_instance_is_mi',
                             'sp_send_dbmail',
                             'sp_SendMailMessage',
                             'sp_syscollector_create_collection_set',
                             'sp_syscollector_delete_collection_set',
                             'sp_syscollector_disable_collector',
                             'sp_syscollector_enable_collector',
                             'sp_syscollector_get_collection_set_execution_status',
                             'sp_syscollector_run_collection_set',
                             'sp_syscollector_start_collection_set',
                             'sp_syscollector_update_collection_set',
                             'sp_syscollector_upload_collection_set',
                             'sp_syscollector_verify_collector_state',
                             'sp_syspolicy_add_policy',
                             'sp_syspolicy_add_policy_category_subscription',
                             'sp_syspolicy_delete_policy',
                             'sp_syspolicy_delete_policy_category_subscription',
                             'sp_syspolicy_update_policy',
                             'sp_sysutility_mi_add_ucp_registration',
                             'sp_sysutility_mi_disable_collection',
                             'sp_sysutility_mi_enroll',
                             'sp_sysutility_mi_initialize_collection',
                             'sp_sysutility_mi_remove',
                             'sp_sysutility_mi_remove_ucp_registration',
                             'sp_sysutility_mi_upload',
                             'sp_sysutility_mi_validate_enrollment_preconditions',
                             'sp_sysutility_ucp_add_mi',
                             'sp_sysutility_ucp_add_policy',
                             'sp_sysutility_ucp_calculate_aggregated_dac_health',
                             'sp_sysutility_ucp_calculate_aggregated_mi_health',
                             'sp_sysutility_ucp_calculate_computer_health',
                             'sp_sysutility_ucp_calculate_dac_file_space_health',
                             'sp_sysutility_ucp_calculate_dac_health',
                            'sp_sysutility_ucp_calculate_filegroups_with_policy_violations',
                             'sp_sysutility_ucp_calculate_health',
                             'sp_sysutility_ucp_calculate_mi_file_space_health',
                             'sp_sysutility_ucp_calculate_mi_health',
                             'sp_sysutility_ucp_configure_policies',
                             'sp_sysutility_ucp_create',
                             'sp_sysutility_ucp_delete_policy',
                             'sp_sysutility_ucp_delete_policy_history',
                             'sp_sysutility_ucp_get_policy_violations',
                             'sp_sysutility_ucp_initialize',
                             'sp_sysutility_ucp_initialize_mdw',
                             'sp_sysutility_ucp_remove_mi',
                             'sp_sysutility_ucp_update_policy',
                             'sp_sysutility_ucp_update_utility_configuration',
                             'sp_sysutility_ucp_validate_prerequisites',
                             'sp_validate_user',
                             'syscollector_collection_set_is_running_update_trigger',
                             'sysmail_help_status_sp'
)

ORDER BY schema_name, module_name

If any procedures or functions are returned that are not documented, this is a finding.

```

Updated:
```
Review the system documentation to obtain a listing of stored procedures and functions that use impersonation. Execute the following query:

SELECT S.name AS schema_name, O.name AS module_name,
USER_NAME(
CASE M.execute_as_principal_id
WHEN -2 THEN COALESCE(O.principal_id, S.principal_id)
ELSE M.execute_as_principal_id
END
) AS execute_as
FROM sys.sql_modules M
JOIN sys.objects O ON M.object_id = O.object_id
JOIN sys.schemas S ON O.schema_id = S.schema_id
WHERE execute_as_principal_id IS NOT NULL
and       o.name not in 
(             
'fn_sysdac_get_username',
                             'fn_sysutility_ucp_get_instance_is_mi',
                             'sp_send_dbmail',
                             'sp_SendMailMessage',
                             'sp_syscollector_create_collection_set',
                             'sp_syscollector_delete_collection_set',
                             'sp_syscollector_disable_collector',
                             'sp_syscollector_enable_collector',
                             'sp_syscollector_get_collection_set_execution_status',
                             'sp_syscollector_run_collection_set',
                             'sp_syscollector_start_collection_set',
                             'sp_syscollector_update_collection_set',
                             'sp_syscollector_upload_collection_set',
                             'sp_syscollector_verify_collector_state',
                             'sp_syspolicy_add_policy',
                             'sp_syspolicy_add_policy_category_subscription',
                             'sp_syspolicy_delete_policy',
                             'sp_syspolicy_delete_policy_category_subscription',
                             'sp_syspolicy_update_policy',
                             'sp_sysutility_mi_add_ucp_registration',
                             'sp_sysutility_mi_disable_collection',
                             'sp_sysutility_mi_enroll',
                             'sp_sysutility_mi_initialize_collection',
                             'sp_sysutility_mi_remove',
                             'sp_sysutility_mi_remove_ucp_registration',
                             'sp_sysutility_mi_upload',
                             'sp_sysutility_mi_validate_enrollment_preconditions',
                             'sp_sysutility_ucp_add_mi',
                             'sp_sysutility_ucp_add_policy',
                             'sp_sysutility_ucp_calculate_aggregated_dac_health',
                             'sp_sysutility_ucp_calculate_aggregated_mi_health',
                             'sp_sysutility_ucp_calculate_computer_health',
                             'sp_sysutility_ucp_calculate_dac_file_space_health',
                             'sp_sysutility_ucp_calculate_dac_health',
                             'sp_sysutility_ucp_calculate_filegroups_with_policy_violations',
                             'sp_sysutility_ucp_calculate_health',
                             'sp_sysutility_ucp_calculate_mi_file_space_health',
                             'sp_sysutility_ucp_calculate_mi_health',
                             'sp_sysutility_ucp_configure_policies',
                             'sp_sysutility_ucp_create',
                             'sp_sysutility_ucp_delete_policy',
                             'sp_sysutility_ucp_delete_policy_history',
                             'sp_sysutility_ucp_get_policy_violations',
                             'sp_sysutility_ucp_initialize',
                             'sp_sysutility_ucp_initialize_mdw',
                             'sp_sysutility_ucp_remove_mi',
                             'sp_sysutility_ucp_update_policy',
                             'sp_sysutility_ucp_update_utility_configuration',
                             'sp_sysutility_ucp_validate_prerequisites',
                             'sp_validate_user',
                             'syscollector_collection_set_is_running_update_trigger',
                             'sysmail_help_status_sp'
)

ORDER BY schema_name, module_name

If any procedures or functions are returned that are not documented, this is a finding.

```
---
SV-271195:
Old: 
```
Execute the following query to obtain a listing of user databases whose owner is a member of a fixed server role:

 SELECT 
              D.name AS database_name, SUSER_SNAME(D.owner_sid) AS owner_name,
              FRM.is_fixed_role_member
FROM sys.databases D
OUTER APPLY (
              SELECT MAX(fixed_role_member) AS is_fixed_role_member
              FROM (
                            SELECT IS_SRVROLEMEMBER(R.name, SUSER_SNAME(D.owner_sid)) AS fixed_role_member
                            FROM sys.server_principals R
                            WHERE is_fixed_role = 1
              ) A
) FRM
WHERE D.database_id > 4
              AND (FRM.is_fixed_role_member = 1 
                            OR FRM.is_fixed_role_member IS NULL)
ORDER BY database_name 

If no databases are returned, this is not a finding. 

For each database/login returned, review the Server Role memberships 

1.	In SQL Server Management Studio, Expand “Logins”
2.	Double-click the name of the Login
3.	Click the “Server Roles” tab 

If any server roles are selected, but not documented and authorized, this is a finding.

```

Updated:
```
Execute the following query to obtain a listing of user databases whose owner is a member of a fixed server role:

 SELECT 
              D.name AS database_name, SUSER_SNAME(D.owner_sid) AS owner_name,
              FRM.is_fixed_role_member
FROM sys.databases D
OUTER APPLY (
              SELECT MAX(fixed_role_member) AS is_fixed_role_member
              FROM (
                            SELECT IS_SRVROLEMEMBER(R.name, SUSER_SNAME(D.owner_sid)) AS fixed_role_member
                            FROM sys.server_principals R
                            WHERE is_fixed_role = 1
              ) A
) FRM
WHERE D.database_id > 4
              AND (FRM.is_fixed_role_member = 1 
                            OR FRM.is_fixed_role_member IS NULL)
ORDER BY database_name 

If no databases are returned, this is not a finding. 

For each database/login returned, review the Server Role memberships:
1. In SQL Server Management Studio, expand "Logins".
2. Double-click the name of the login.
3. Click the "Server Roles" tab.

If any server roles are selected, but not documented and authorized, this is a finding.

```
---
SV-271199:
Old: 
```
Detailed information on the NIST Cryptographic Module Validation Program (CMVP) is available at the following website: http://csrc.nist.gov/groups/STM/cmvp/index.html.

Review system documentation to determine whether cryptography for classified or sensitive information is required by the information owner.

If the system documentation does not specify the type of information hosted on SQL Server as classified, sensitive, and/or unclassified, this is a finding.

If neither classified nor sensitive information exists within SQL Server databases or configuration, this is not a finding.

Verify that Windows is configured to require the use of FIPS-compliant algorithms.

Click "Start",  enter "Local Security Policy", and then press "Enter". Expand "Local Policies", select "Security Options", and then locate "System Cryptography: Use FIPS compliant algorithms for encryption, hashing, and signing".

If the Security Setting for this option is "Disabled", this is a finding.

Note: The list of acceptable algorithms is "AES 256" and "Triple DES".

If cryptography is being used by SQL Server, verify that the cryptography is NIST FIPS 140-2 or 140-3 certified by running the following SQL query:

SELECT DISTINCT name, algorithm_desc
FROM sys.symmetric_keys
WHERE key_algorithm NOT IN ('D3','A3')
ORDER BY name

If any items listed show an uncertified NIST FIPS 140-2 algorithm type, this is a finding.

```

Updated:
```
Detailed information on the NIST Cryptographic Module Validation Program (CMVP) is available at the following website: http://csrc.nist.gov/groups/STM/cmvp/index.html.

Review system documentation to determine whether cryptography for classified or sensitive information is required by the information owner.

If the system documentation does not specify the type of information hosted on SQL Server as classified, sensitive, and/or unclassified, this is a finding.

If neither classified nor sensitive information exists within SQL Server databases or configuration, this is not a finding.

Verify that Windows is configured to require the use of FIPS-compliant algorithms.

1. Click "Start".
2. Type "Local Security Policy".
3. Press "Enter". 
4. Expand "Local Policies". 
5. Select "Security Options".
6. Locate "System Cryptography:  Use FIPS compliant algorithms for encryption, hashing, and signing". 

If the Security Setting for this option is "Disabled", this is a finding.

Note: The list of acceptable algorithms is "AES 256" and "Triple DES".

If cryptography is being used by SQL Server, verify that the cryptography is NIST FIPS 140-2 or 140-3 certified by running the following SQL query:

SELECT DISTINCT name, algorithm_desc
FROM sys.symmetric_keys
WHERE key_algorithm NOT IN ('D3','A3')
ORDER BY name

If any items listed show an uncertified NIST FIPS 140-2 algorithm type, this is a finding.

```
---
SV-271201:
Old: 
```
Review the system documentation to determine whether the organization has defined the information at rest that is to be protected from modification, which must include, at a minimum, PII and classified information. 

If no information is identified as requiring such protection, this is not a finding. 

Review the configuration of SQL Server, Windows, and additional software as relevant. 

If full-disk encryption is required, and Windows or the storage system is not configured for this, this is a finding. 

If database transparent data encryption (TDE) is called for, check whether it is enabled: 

SELECT
DB_NAME(database_id) AS [Database Name], CASE encryption_state WHEN 0 THEN 'No database encryption key present, no encryption' 
WHEN 1 THEN 'Unencrypted' 
WHEN 2 THEN 'Encryption in progress' 
WHEN 3 THEN 'Encrypted' 
WHEN 4 THEN 'Key change in progress' 
WHEN 5 THEN 'Decryption in progress' 
WHEN 6 THEN 'Protection change in progress' 
END AS [Encryption State]
FROM sys.dm_database_encryption_keys

For each user database for which encryption is called for and it is marked Unencrypted, this is a finding. 

If table/column encryption and/or a separation between those who own the data (and can view it) and those who manage the data (but should have no access) is required for PII or similar types of data, use Always Encrypted.  The details for configuring Always Encrypted are located here: https://msdn.microsoft.com/en-us/library/mt163865.aspx.

Review the definitions and contents of the relevant tables/columns for the Always Encryption settings, if any of the information defined as requiring cryptographic protection is not encrypted this is a finding.

```

Updated:
```
Review the system documentation to determine whether the organization has defined the information at rest that is to be protected from disclosure or modification, which must include, at a minimum, PII and classified information. 

If no information is identified as requiring such protection, this is not a finding. 

Review the configuration of SQL Server, Windows, and additional software as relevant. 

If full-disk encryption is required, and Windows or the storage system is not configured for this, this is a finding. 

If database transparent data encryption (TDE) is called for, check whether it is enabled: 

SELECT
DB_NAME(database_id) AS [Database Name], CASE encryption_state WHEN 0 THEN 'No database encryption key present, no encryption' 
WHEN 1 THEN 'Unencrypted' 
WHEN 2 THEN 'Encryption in progress' 
WHEN 3 THEN 'Encrypted' 
WHEN 4 THEN 'Key change in progress' 
WHEN 5 THEN 'Decryption in progress' 
WHEN 6 THEN 'Protection change in progress' 
END AS [Encryption State]
FROM sys.dm_database_encryption_keys

For each user database for which encryption is called for and it is marked Unencrypted, this is a finding. 

If table/column encryption and/or a separation between those who own the data (and can view it) and those who manage the data (but should have no access) is required for PII or similar types of data, use Always Encrypted. The details for configuring Always Encrypted are located here: https://msdn.microsoft.com/en-us/library/mt163865.aspx.

Review the definitions and contents of the relevant tables/columns for the Always Encryption settings, if any of the information defined as requiring cryptographic protection is not encrypted this is a finding.

```
---
</details>

#### Fixes:
<details open>
  <summary>Click to expand.</summary>
SV-271119:
Old: 
```
Use GRANT, REVOKE, DENY, ALTER ROLE … ADD MEMBER … and/or ALTER ROLE …. DROP MEMBER statements to add and remove permissions on database-level securables, bringing them into line with the documented requirements.

```
New:
```
Configure SQL Server settings and access controls to permit user access only to objects and data that the user is authorized to view or interact with, and to prevent access to all other objects and data.

Use GRANT, REVOKE, DENY, ALTER ROLE … ADD MEMBER … and/or ALTER ROLE …. DROP MEMBER statements to add and remove permissions on database-level securables, bringing them into line with the documented requirements.

```
---
SV-271121:
Old: 
```
Alter sensitive tables to utilize system versioning.

Alter non-temporal table to define periods for system versioning .

ALTER TABLE InsurancePolicy 
ADD PERIOD FOR SYSTEM_TIME (SysStartTime, SysEndTime),   
SysStartTime datetime2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT GETUTCDATE(),  
SysEndTime datetime2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.99999999');  
 
ALTER TABLE InsurancePolicy SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE=dbo.InsurancePolicyHistory));

https://docs.microsoft.com/sql/t-sql/statements/alter-table-transact-sql?view=sql-server-2016#system_versionin

```
New:
```
Alter sensitive tables to use system versioning.

 --Alter non-temporal table to define periods for system versioning
 ALTER TABLE <MyTableName>
 ADD PERIOD FOR SYSTEM_TIME (SysStartTime, SysEndTime),
 SysStartTime datetime2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL
     DEFAULT SYSUTCDATETIME(),
 SysEndTime datetime2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL
     DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.99999999') ;
 
 --Enable system versioning with 1 year retention for historical data
 ALTER TABLE <MyTableName>
 SET (SYSTEM_VERSIONING = ON (HISTORY_RETENTION_PERIOD = 1 YEAR)) ;
 
https://docs.microsoft.com/sql/t-sql/statements/alter-table-transact-sql?view=sql-server-2022#system_versionin

```
---
SV-271124:
Old: 
```
Create a database role specifically for audit maintainers, and give it permission to maintain audits, without granting it unnecessary permissions (The role name used here is an example; other names may be used.):

CREATE ROLE DATABASE_AUDIT_MAINTAINERS;
GO

GRANT ALTER ANY DATABASE AUDIT TO DATABASE_AUDIT_MAINTAINERS;
GO

Use REVOKE and/or DENY and/or ALTER ROLE ... DROP MEMBER ... statements to remove the ALTER ANY DATABASE AUDIT permission from all users.  Then, for each authorized database user, run the statement:  

ALTER ROLE DATABASE_AUDIT_MAINTAINERS ADD MEMBER;
GO

Use REVOKE and/or DENY and/or ALTER SERVER ROLE ... DROP MEMBER ... statements to remove CONTROL DATABASE permission from logins that do not need it.

```
New:
```
Create a database role specifically for audit maintainers, and give it permission to maintain audits without granting it unnecessary permissions. (The role name used below is an example; other names may be used.)

CREATE ROLE DATABASE_AUDIT_MAINTAINERS;
GO

GRANT ALTER ANY DATABASE AUDIT TO DATABASE_AUDIT_MAINTAINERS;
GO

Use REVOKE and/or DENY and/or ALTER ROLE ... DROP MEMBER ... statements to remove the ALTER ANY DATABASE AUDIT permission from all users. Then, for each authorized database user, run the statement:

ALTER ROLE DATABASE_AUDIT_MAINTAINERS ADD MEMBER;
GO

Use REVOKE and/or DENY and/or ALTER SERVER ROLE ... DROP MEMBER ... statements to remove CONTROL DATABASE permission from logins that do not need it.

```
---
SV-271146:
Old: 
```
Add and/or update system documentation to include any accounts authorized for object ownership and remove any account not authorized. 

To change the schema owning a database object in SQL Server, use this code as an example: 

USE AdventureWorks2012;  
GO  
ALTER SCHEMA HumanResources TRANSFER Person.Address;  
GO  

Caution: This can break code. This Fix should be implemented in conjunction with corrections to such code. Test before deploying in production. Deploy during a scheduled maintenance window.

```
New:
```
Document and obtain approval for any account(s) authorized for object ownership. If necessary, use the ALTER AUTHORIZATION command to change object ownership to an authorized account. 

Example provided below. 

ALTER AUTHORIZATION ON OBJECT::test.table TO AuthorizedUser;

https://docs.microsoft.com/en-us/sql/t-sql/statements/alter-authorization-transact-sql

```
---
SV-271147:
Old: 
```
Document and obtain approval for any non-administrative users who require the ability to modify database structure and logic modules.

REVOKE ALTER ON [<Object Name>] TO [<Principal Name>]

```
New:
```
Document and obtain approval for any nonadministrative users who require the ability to create, alter, or replace logic modules.

Revoke the ALTER permission from unauthorized users and roles:

REVOKE ALTER ON [<Object Name>] FROM [<Principal Name>]

```
---
SV-271168:
Old: 
```
Modify the system security plan, to include whether the database is static, the correct recovery model to be used, the backup schedule, and the plan for testing database restoration. 

In SQL Server Management Studio, Object Explorer, right-click on the name of the database; select Properties. Select the Options page. Set the Recovery Model field, near the top of the page, to the correct value. 

In Object Explorer, expand >> SQL Server Agent >> Jobs. Create, modify, and delete jobs to implement the backup schedule. (Alternatively, this may done using T-SQL code or Third-party Backup software.) 

Correct any issues that have been causing backups to fail. 

Test the restoration of the database at least once a year; correct any issues that cause it to fail. Maintain a record of these tests.

```
New:
```
Modify the system security plan to include whether the database is static, the correct recovery model to be used, the backup schedule, and the plan for testing database restoration. 

In SQL Server Management Studio Object Explorer, right-click on the name of the database; select Properties >> Options page. Set the Recovery Model field (near the top of the page) to the correct value. 

In Object Explorer, expand >> SQL Server Agent >> Jobs. Create, modify, and delete jobs to implement the backup schedule. (Alternatively, this may be done using T-SQL code or third-party backup software.) 

Correct any issues that have been causing backups to fail. 

Test the restoration of the database at least once a year; correct any issues that cause it to fail. Maintain a record of these tests.

```
---
SV-271169:
Old: 
```
Assign an encryption password to the Database Master Key that is a minimum of 15 characters with at least 1 upper-case character, 1 lower-case character, 1 special character, and 1 numeric character, and at least 8 characters changed from the previous password. 

To change the Database Master Key encryption password: 

USE [database name]; 
ALTER MASTER KEY REGENERATE WITH ENCRYPTION BY PASSWORD = '[new password]'; 

Note: The Database Master Key encryption method should not be changed until the effects are thoroughly reviewed. Changing the master key encryption causes all encryption using the Database Master Key to be decrypted and re-encrypted. This action should not be taken during a high-demand time. Please see the MS SQL Server documentation prior to re-encrypting the Database Master Key for detailed information.

```
New:
```
Assign an encryption password to the Database Master Key that is a minimum of 15 characters with at least one uppercase character, one lowercase character, one special character, one numeric character, and at least eight characters changed from the previous password. To change the Database Master Key encryption password: 

USE [database name];
ALTER MASTER KEY REGENERATE WITH ENCRYPTION BY PASSWORD = 'new password'; 

Note: Do not change the Database Master Key encryption method until the effects are thoroughly reviewed. Changing the master key encryption causes all encryption using the Database Master Key to be decrypted and reencrypted. This action should not be taken during a high-demand time. 

Refer to the SQL Server documentation found here prior to reencrypting the Database Master Key: 
https://learn.microsoft.com/en-us/sql/relational-databases/security/encryption/create-a-database-master-key?

```
---
SV-271171:
Old: 
```
Document and implement procedures to safely back up and store the Certificate used for encryption in a secure location that is not on the SQL Server. Include in the procedures to establish evidence of backup and storage as well as careful, restricted access and restoration of the Certificate.

BACKUP CERTIFICATE 'CertificateName' TO FILE = 'path_to_file' 
WITH PRIVATE KEY (FILE = 'path_to_pvk', ENCRYPTION BY PASSWORD = 'password'); 

As this requires a password, ensure it is not exposed to unauthorized persons or stored as plain text.

```
New:
```
Document and implement procedures to safely back up and store the Certificate used for encryption. Include in the procedures methods to establish evidence of backup and storage, and careful, restricted access and restoration of the Certificate. Also, include provisions to store the backup off-site. 

BACKUP CERTIFICATE 'CertificateName' TO FILE = 'path_to_file' WITH PRIVATE KEY (FILE = 'path_to_pvk', ENCRYPTION BY PASSWORD = 'password'); 

As this requires a password, ensure it is not exposed to unauthorized persons or stored as plain text.

```
---
SV-271172:
Old: 
```
Check the server documentation, locate security-related database objects and code in a separate database, schema, table, or other separate security domain from database objects and code implementing application logic.  

Microsoft SQL Server 2005 introduced the concept of database object schemas. Schemas are analogous to separate namespaces or containers used to store database objects. Security permissions apply to schemas, making them an important tool for separating and protecting database objects based on access rights. Schemas reduce the work required, and improve the flexibility, for security-related administration of a database.

User-schema separation allows for more flexibility in managing database object permissions. A schema is a named container for database objects, which allows the user to group objects into separate namespaces.

Where possible, locate security-related database objects and code in a separate database, schema, or other separate security domain from database objects and code implementing application logic. In all cases, use GRANT, REVOKE, DENY, ALTER ROLE … ADD MEMBER … and/or ALTER ROLE …. DROP MEMBER statements to add and remove permissions on server-level and database-level security-related objects to provide effective isolation.

```
New:
```
Check documentation and locate security-related database objects and code in a separate database, schema, table, or other separate security domain from database objects and code implementing application logic.

Schemas are analogous to separate namespaces or containers used to store database objects. Security permissions apply to schemas, making them an important tool for separating and protecting database objects based on access rights. Schemas reduce the work required, and improve the flexibility, for security-related administration of a database.

User-schema separation allows for more flexibility in managing database object permissions. A schema is a named container for database objects, which allows the user group objects into separate namespaces.

Where possible, locate security-related database objects and code in a separate database, schema, or other separate security domain from database objects and code implementing application logic. In all cases, use GRANT, REVOKE, DENY, ALTER ROLE … ADD MEMBER … and/or ALTER ROLE …. DROP MEMBER statements to add and remove permissions on server-level and database-level security-related objects to provide effective isolation.

Consider submitting a request to the vendor for changes to a COTS database when database structure does not isolate security functions and cannot be altered directly by the database administrators without loss of official support.

```
---
SV-271176:
Old: 
```
Use parameterized queries, constraints, foreign keys, etc. to validate data input. 

Modify SQL Server to properly use the correct column data types as required in the database.

```
New:
```
Use parameterized queries, constraints, foreign keys, etc., to validate data input. Modify SQL Server to properly use the correct column data types as required in the database.

Consider submitting a request to the vendor for changes to a COTS database when code is discovered that could create invalid inputs and cannot be altered directly by the database administrators without loss of official support.

```
---
SV-271179:
Old: 
```
Adjust database code to remove any information not required for explaining the error to an end user.

Consider enabling trace flag 3625 to mask certain system-level error information returned to non-administrative users.

Launch SQL Server Configuration Manager >> Click SQL Services >> Open the instance properties >> Click the Service Parameters tab >> Enter "-T3625" >> Click Add >> Click OK >> Restart SQL instance.

```
New:
```
Adjust database code to remove any information not required for explaining the error to an end user.

Consider enabling trace flag 3625 to mask certain system-level error information returned to nonadministrative users.

1. Launch SQL Server Configuration Manager >> SQL Services.
2. Open the instance properties.
3. Select the "Service Parameters" tab.
4. Enter "-T3625". 
5. Click "Add" and then click "OK".
6. Restart SQL instance.

```
---
SV-271186:
Old: 
```
To correct object ownership:

ALTER AUTHORIZATION ON <Securable> TO <Principal>

To revoke any unauthorized permissions:

REVOKE [Permission] ON <Securable> TO <Principal>

```
New:
```
To correct object ownership:

ALTER AUTHORIZATION ON <Securable> TO <Principal>

To revoke any unauthorized permissions:

REVOKE [Permission] ON <Securable> FROM <Principal>

```
---
SV-271195:
Old: 
```
Remove unauthorized users from roles:

ALTER ROLE DROP MEMBER user;

https://msdn.microsoft.com/en-us/library/ms189775.aspx

Set the owner of the database to an authorized login:

ALTER AUTHORIZATION ON database::DatabaseName TO login;

https://msdn.microsoft.com/en-us/library/ms187359.aspx

```
New:
```
Remove unauthorized users from roles:

ALTER ROLE DROP MEMBER user;

https://learn.microsoft.com/en-us/sql/t-sql/statements/alter-role-transact-sql?

Set the owner of the database to an authorized login:

ALTER AUTHORIZATION ON database::DatabaseName TO login;

https://learn.microsoft.com/en-us/sql/t-sql/statements/alter-authorization-transact-sql?

```
---
SV-271199:
Old: 
```
Configure cryptographic functions to use NSA-approved cryptography compliant algorithms.

Use DoD code-signing certificates to create asymmetric keys stored in the database used to encrypt sensitive data stored in the database.

Run the following SQL script to create a certificate:
USE 
CREATE CERTIFICATE 
 ENCRYPTION BY PASSWORD = <'password'>
 FROM FILE = <'path/file_name'>
 WITH SUBJECT = 'name of person creating key',
 EXPIRY_DATE = '<'expiration date: yyyymmdd'>'

Run the following SQL script to create a symmetric key and assign an existing certificate:
USE 
CREATE SYMMETRIC KEY <'key name'>
 WITH ALGORITHM = AES_256 
 ENCRYPTION BY CERTIFICATE

For Transparent Data Encryption (TDE):
USE master;
CREATE MASTER KEY ENCRYPTION BY PASSWORD = '';
CREATE CERTIFICATE  . . .;
USE ;
CREATE DATABASE ENCRYPTION KEY
WITH ALGORITHM = AES_256
ENCRYPTION BY SERVER CERTIFICATE ;
ALTER DATABASE 
SET ENCRYPTION ON;

```
New:
```
Configure cryptographic functions to use NSA-approved cryptography compliant algorithms.

Use DOD code-signing certificates to create asymmetric keys stored in the database used to encrypt sensitive data stored in the database.

Run the following SQL script to create a certificate:

USE 
CREATE CERTIFICATE 
 ENCRYPTION BY PASSWORD = <'password'>
 FROM FILE = <'path/file_name'>
 WITH SUBJECT = 'name of person creating key',
 EXPIRY_DATE = '<'expiration date: yyyymmdd'>'

Run the following SQL script to create a symmetric key and assign an existing certificate:

USE 
CREATE SYMMETRIC KEY <'key name'>
 WITH ALGORITHM = AES_256 
 ENCRYPTION BY CERTIFICATE

For Transparent Data Encryption (TDE):

USE master;
CREATE MASTER KEY ENCRYPTION BY PASSWORD = '';
CREATE CERTIFICATE  . . .;
USE ;
CREATE DATABASE ENCRYPTION KEY
WITH ALGORITHM = AES_256
ENCRYPTION BY SERVER CERTIFICATE ;
ALTER DATABASE 
SET ENCRYPTION ON;

```
---
SV-271201:
Old: 
```
Where full-disk encryption is required, configure Windows and/or the storage system to provide this. 

Where transparent data encryption (TDE) is required, create a master key, obtain a certificate protected by the master key, create a database encryption key and protect it by the certificate, and then set the database to use encryption. For guidance from MSDN on how to do this: https://msdn.microsoft.com/en-us/library/bb934049.aspx. 

Where table/column encryption is required, enable encryption on the tables/columns in question. For guidance from the Microsoft Developer Network on how to do this with Always Encrypted: https://msdn.microsoft.com/en-us/library/mt163865.aspx.

```
New:
```
Where full-disk encryption is required, configure Windows and/or the storage system to provide this. 

Where TDE is required, create a master key, obtain a certificate protected by the master key, create a database encryption key and protect it by the certificate, and then set the database to use encryption. For guidance from MSDN on how to do this, refer to: https://msdn.microsoft.com/en-us/library/bb934049.aspx. 

Where table/column encryption is required, enable encryption on the tables/columns in question. For guidance from the Microsoft Developer Network on how to do this with Always Encrypted, refer to: https://msdn.microsoft.com/en-us/library/mt163865.aspx.

```
---
</details>

### Updated Impacts
<details open>
  <summary>Click to expand.</summary>
SV-271121:
Old: 0.3
New: 0.5
---
SV-271124:
Old: 0
New: 0.5
---
SV-271170:
Old: 0
New: 0.5
---
SV-271172:
Old: 0.3
New: 0.5
---
SV-271186:
Old: 0.3
New: 0.5
---
SV-271201:
Old: 0
New: 0.7
---
</details>

### Updated Titles
<details>
  <summary>Click to expand.</summary>
SV-271121:
Old: SQL Server must protect against a user falsely repudiating by use of system-versioned tables (Temporal Tables).
New: SQL Server must protect against a user falsely repudiating by using system-versioned tables (Temporal Tables).
---
SV-271124:
Old: SQL Server must allow only the ISSM (or individuals or roles appointed by the ISSM) to select which auditable events are to be audited.
New: SQL Server must allow only the information system security manager (ISSM) (or individuals or roles appointed by the ISSM) to select which auditable events are to be audited.
---
SV-271147:
Old: The role(s)&#x2F;group(s) used to modify database structure (including but not necessarily limited to tables, indexes, storage, etc.) and logic modules (stored procedures, functions, triggers, links to software external to SQL Server, etc.) must be restricted to authorized users.
New: The role(s)&#x2F;group(s) used to modify database structure (including but not limited to tables, indexes, storage, etc.) and logic modules (stored procedures, functions, triggers, links to software external to SQL Server, etc.) must be restricted to authorized users.
---
SV-271171:
Old: The Certificate used for encryption must be backed up and stored in a secure location that is not on the SQL Server.
New: The certificate used for encryption must be backed up and stored in a secure location that is not on the SQL Server.
---
SV-271172:
Old: SQL Server must isolate security functions from non-security functions.
New: SQL Server must isolate security functions from nonsecurity functions.
---
SV-271173:
Old: Database contents must be protected from unauthorized and unintended information transfer by enforcement of a data-transfer policy.
New: Database contents must be protected from unauthorized and unintended information transfer by enforcement of a data transfer policy.
---
SV-271179:
Old: SQL Server must provide non-privileged users with error messages that provide information necessary for corrective actions without revealing information that could be exploited by adversaries.
New: SQL Server must provide nonprivileged users with error messages that provide information necessary for corrective actions without revealing information that could be exploited by adversaries.
---
SV-271186:
Old: SQL Server must enforce discretionary access control policies, as defined by the data owner, over defined subjects and objects.
New: SQL Server must enforce discretionary access control (DAC) policies, as defined by the data owner, over defined subjects and objects.
---
SV-271188:
Old: Execution of stored procedures and functions that utilize execute as must be restricted to necessary cases only.
New: Execution of stored procedures and functions that use execute as must be restricted to necessary cases only.
---
SV-271199:
Old: SQL Server must use NSA-approved cryptography to protect classified information in accordance with the data owners requirements.
New: SQL Server must use NSA-approved cryptography to protect classified information in accordance with the data owner’s requirements.
---
SV-271201:
Old: SQL Server must implement cryptographic mechanisms to prevent unauthorized modification of organization-defined information at rest (to include, at a minimum, PII and classified information) on organization-defined information system components.
New: SQL Server must implement cryptographic mechanisms to prevent unauthorized modification or disclosure of organization-defined information at rest (to include, at a minimum, PII and classified information) on organization-defined information system components.
---
</details>

### Updated Descriptions
<details>
  <summary>Click to expand.</summary>
SV-271119:
Old:
```
Authentication with a DoD-approved PKI certificate does not necessarily imply authorization to access SQL Server. To mitigate the risk of unauthorized access to sensitive information by entities that have been issued certificates by DoD-approved PKIs, all DoD systems, including databases, must be properly configured to implement access control policies. 

Successful authentication must not automatically give an entity access to an asset or security boundary. Authorization procedures and controls must be implemented to ensure each authenticated entity also has a validated and current authorization. Authorization is the process of determining whether an entity, once authenticated, is permitted to access a specific asset. Information systems use access control policies and enforcement mechanisms to implement this requirement. 

Access control policies include identity-based policies, role-based policies, and attribute-based policies. Access enforcement mechanisms include access control lists, access control matrices, and cryptography. These policies and mechanisms must be employed by the application to control access between users (or processes acting on behalf of users) and objects (e.g., devices, files, records, processes, programs, and domains) in the information system. 

This requirement is applicable to access control enforcement applications, a category that includes database management systems.  If SQL Server does not follow applicable policy when approving access, it may be in conflict with networks or other applications in the information system. This may result in users either gaining or being denied access inappropriately and in conflict with applicable policy.

```
New:
```
Authentication with a DOD-approved PKI certificate does not necessarily imply authorization to access the DBMS. To mitigate the risk of unauthorized access to sensitive information by entities that have been issued certificates by DOD-approved PKIs, all DOD systems, including databases, must be properly configured to implement access control policies. 

Successful authentication must not automatically give an entity access to an asset or security boundary. Authorization procedures and controls must be implemented to ensure each authenticated entity also has a validated and current authorization. Authorization is the process of determining whether an entity, once authenticated, is permitted to access a specific asset. Information systems use access control policies and enforcement mechanisms to implement this requirement. 

Access control policies include identity-based policies, role-based policies, and attribute-based policies. Access enforcement mechanisms include access control lists, access control matrices, and cryptography. These policies and mechanisms must be employed by the application to control access between users (or processes acting on behalf of users) and objects (e.g., devices, files, records, processes, programs, and domains) in the information system. 

This requirement is applicable to access control enforcement applications, a category that includes database management systems. If SQL Server does not follow applicable policy when approving access, it may be in conflict with networks or other applications in the information system. This may result in users either gaining or being denied access inappropriately and in conflict with applicable policy.

```
---
SV-271121:
Old:
```
Non-repudiation of actions taken is required in order to maintain data integrity. Examples of particular actions taken by individuals include creating information, sending a message, approving information (e.g., indicating concurrence or signing a contract), and receiving a message.

Non-repudiation protects against later claims by a user of not having created, modified, or deleted a particular data item or collection of data in the database. 

In designing a database, the organization must define the types of data and the user actions that must be protected from repudiation. The implementation must then include building audit features into the application data tables and configuring SQL Server's audit tools to capture the necessary audit trail. Design and implementation also must ensure that applications pass individual user identification to SQL Server, even where the application connects to SQL Server with a standard, shared account. 

Applications should use temporal tables to track the changes and history of sensitive data.

```
New:
```
Nonrepudiation of actions taken is required to maintain data integrity. Examples of particular actions taken by individuals include creating information, sending a message, approving information (e.g., indicating concurrence or signing a contract), and receiving a message. 

Nonrepudiation protects against later claims by a user of not having created, modified, or deleted a particular data item or collection of data in the database.

In designing a database, the organization must define the types of data and the user actions that must be protected from repudiation. The implementation must then include building audit features into the application data tables and configuring SQL servers’ audit tools to capture the necessary audit trail. Design and implementation also must ensure that applications pass individual user identification to SQL Server, even where the application connects to the DBMS with a standard, shared account.

Applications should use temporal tables to track the changes and history of sensitive data.

```
---
SV-271122:
Old:
```
Non-repudiation of actions taken is required in order to maintain data integrity. Examples of particular actions taken by individuals include creating information, sending a message, approving information (e.g., indicating concurrence or signing a contract), and receiving a message. 

Non-repudiation protects against later claims by a user of not having created, modified, or deleted a particular data item or collection of data in the database.

SQL Server provides the ability for high privileged accounts to impersonate users in a database using the TRUSTWORTHY feature. This will allow members of the fixed database role to impersonate any user within the database.

```
New:
```
Nonrepudiation of actions taken is required to maintain data integrity. Examples of particular actions taken by individuals include creating information, sending a message, approving information (e.g., indicating concurrence or signing a contract), and receiving a message. 

Nonrepudiation protects against later claims by a user of not having created, modified, or deleted a particular data item or collection of data in the database.

In designing a database, the organization must define the types of data and the user actions that must be protected from repudiation. The implementation must then include building audit features into the application data tables and configuring the DBMS's audit tools to capture the necessary audit trail. Design and implementation also must ensure that applications pass individual user identification to the DBMS, even where the application connects to the DBMS with a standard, shared account.

SQL Server provides the ability for high privileged accounts to impersonate users in a database using the TRUSTWORTHY feature. This will allow members of the fixed database role to impersonate any user within the database.

```
---
SV-271124:
Old:
```
Inspec attributes has specified that SQL Server Audit is not in use at
    the database level, this is not applicable (NA)

```
New:
```
Without the capability to restrict which roles and individuals can select which events are audited, unauthorized personnel may be able to prevent or interfere with the auditing of critical events.

Suppression of auditing could permit an adversary to evade detection.

Misconfigured audits can degrade the system's performance by overwhelming the audit log. Misconfigured audits may also make it more difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one.

```
---
SV-271143:
Old:
```
If the system were to allow any user to make changes to software libraries, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.

Accordingly, only qualified and authorized individuals shall be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.

Unmanaged changes that occur to the database software libraries or configuration can lead to unauthorized or compromised installations.

```
New:
```
If the system were to allow any user to make changes to software libraries, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.

Accordingly, only qualified and authorized individuals must be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.

Unmanaged changes that occur to the database software libraries or configuration can lead to unauthorized or compromised installations.

```
---
SV-271146:
Old:
```
Within the database, object ownership implies full privileges to the owned object, including the privilege to assign access to the owned objects to other subjects. Database functions and procedures can be coded using definer's rights. This allows anyone who utilizes the object to perform the actions if they were the owner. If not properly managed, this can lead to privileged actions being taken by unauthorized individuals.

Conversely, if critical tables or other objects in SQL Server rely on unauthorized owner accounts, these objects may be lost when an account is removed.

```
New:
```
Within the database, object ownership implies full privileges to the owned object, including the privilege to assign access to the owned objects to other subjects. Database functions and procedures can be coded using definer's rights. This allows anyone who uses the object to perform the actions if they were the owner. If not properly managed, this can lead to privileged actions being taken by unauthorized individuals.

Conversely, if critical tables or other objects in SQL Server rely on unauthorized owner accounts, these objects may be lost when an account is removed.

```
---
SV-271147:
Old:
```
If SQL Server were to allow any user to make changes to database structure or logic, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.

Accordingly, only qualified and authorized individuals shall be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.

Unmanaged changes that occur to the database software libraries or configuration can lead to unauthorized or compromised installations.

```
New:
```
If SQL Server were to allow any user to make changes to database structure or logic, those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.

Accordingly, only qualified and authorized individuals must be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.

Unmanaged changes that occur to the database software libraries or configuration can lead to unauthorized or compromised installations.

DBMS functionality and the nature and requirements of databases will vary; so, while users are not permitted to install unapproved software, there may be instances where the organization allows the user to install approved software packages such as from an approved software repository. The requirements for production servers will be more restrictive than those used for development and research.

The DBMS must enforce software installation by users based on what types of software installations are permitted (e.g., updates and security patches to existing software) and what types of installations are prohibited (e.g., software whose pedigree regarding being potentially malicious is unknown or suspect) by the organization. 

In the case of a database management system, this requirement covers stored procedures, functions, triggers, views, etc.



```
---
SV-271169:
Old:
```
Weak passwords may be easily guessed. When passwords are used to encrypt keys used for encryption of sensitive data, then the confidentiality of all data encrypted using that key is at risk.

```
New:
```
Weak passwords may be easily guessed. When passwords are used to encrypt keys used for encryption of sensitive data, the confidentiality of all data encrypted using that key is at risk.

Current DOD passwords require the following: 
- minimum of 15 characters;
- at least one uppercase character;
- one lowercase character;
- one special character;
- one numeric character, and
- at least eight characters changed from the previous password.

```
---
SV-271170:
Old:
```
No databases require encryption hence this is not a finding

```
New:
```
When not encrypted by the Service Master Key, system administrators or application administrators may access and use the Database Master Key to view sensitive data that they are not authorized to view. Where alternate encryption means are not feasible, encryption by the Service Master Key may be necessary. To help protect sensitive data from unauthorized access by DBAs, mitigations may be required. Mitigations may include automatic alerts or other audit events when the Database Master Key is accessed outside of the application or by a DBA account.

```
---
SV-271171:
Old:
```
Backup and recovery of the Certificate used for encryption is critical to the complete recovery of the database. Not having this key can lead to loss of data during recovery.

```
New:
```
Backup and recovery of the certificate used for encryption is critical to the complete recovery of the database. Not having this key can lead to loss of data during recovery.

```
---
SV-271172:
Old:
```
An isolation boundary provides access control and protects the integrity of the hardware, software, and firmware that perform security functions. 

Security functions are the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based.

Developers and implementers can increase the assurance in security functions by employing well-defined security policy models; structured, disciplined, and rigorous hardware and software development techniques; and sound system/security engineering principles. 

Database Management Systems typically separate security functionality from non-security functionality via separate databases or schemas. Database objects or code implementing security functionality should not be commingled with objects or code implementing application logic. When security and non-security functionality are commingled, users who have access to non-security functionality may be able to access security functionality.

```
New:
```
An isolation boundary provides access control and protects the integrity of the hardware, software, and firmware that perform security functions. 

Security functions are the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based.

Developers and implementers can increase the assurance in security functions by employing well-defined security policy models; structured, disciplined, and rigorous hardware and software development techniques; and sound system/security engineering principles. 

Database Management Systems typically separate security functionality from nonsecurity functionality via separate databases or schemas. Database objects or code implementing security functionality should not be commingled with objects or code implementing application logic. When security and nonsecurity functionality are commingled, users who have access to nonsecurity functionality may be able to access security functionality.

```
---
SV-271173:
Old:
```
Applications, including DBMSs, must prevent unauthorized and unintended information transfer via shared system resources. 

Data used for the development and testing of applications often involves copying data from production. It is important that specific procedures exist for this process, to include the conditions under which such transfer may take place, where the copies may reside, and the rules for ensuring sensitive data are not exposed.

Copies of sensitive data must not be misplaced or left in a temporary location without the proper controls.

```
New:
```
Applications, including DBMSs, must prevent unauthorized and unintended information transfer via shared system resources. 

Data used for the development and testing of applications often involves copying data from production. It is important that specific procedures exist for this process, including the conditions under which such transfer may take place, where the copies may reside, and the rules for ensuring sensitive data are not exposed.

Copies of sensitive data must not be misplaced or left in a temporary location without the proper controls.

```
---
SV-271176:
Old:
```
Invalid user input occurs when a user inserts data or characters into an application's data entry fields and the application is unprepared to process that data. This results in unanticipated application behavior, potentially leading to an application or information system compromise. Invalid user input is one of the primary methods employed when attempting to compromise an application.

With respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.

Even when no such hijacking takes place, invalid input that gets recorded in the database, whether accidental or malicious, reduces the reliability and usability of the system. Available protections include data types, referential constraints, uniqueness constraints, range checking, and application-specific logic. Application-specific logic can be implemented within the database in stored procedures and triggers, where appropriate.

This calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.

```
New:
```
Invalid user input occurs when a user inserts data or characters into an application's data entry fields and the application is unprepared to process that data. This results in unanticipated application behavior, potentially leading to an application or information system compromise. Invalid user input is one of the primary methods employed when attempting to compromise an application.

With respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.

Even when no such hijacking takes place, invalid input that gets recorded in the database, whether accidental or malicious, reduces the reliability and usability of the system. Available protections include data types, referential constraints, uniqueness constraints, range checking, and application-specific logic. Application-specific logic can be implemented within the database in stored procedures and triggers, where appropriate.

This calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed and must document what has been discovered.

```
---
SV-271179:
Old:
```
Any DBMS or associated application providing too much information in error messages on the screen or printout risks compromising the data and security of the system. The structure and content of error messages need to be carefully considered by the organization and development team.

Databases can inadvertently provide a wealth of information to an attacker through improperly handled error messages. In addition to sensitive business or personal information, database errors can provide host names, IP addresses, user names, and other system information not required for troubleshooting but very useful to someone targeting the system.

Carefully consider the structure/content of error messages. The extent to which information systems are able to identify and handle error conditions is guided by organizational policy and operational requirements. Information that could be exploited by adversaries includes, for example, logon attempts with passwords entered by mistake as the username, mission/business information that can be derived from (if not stated explicitly by) information recorded, and personal information, such as account numbers, social security numbers, and credit card numbers.

```
New:
```
Any DBMS or associated application providing too much information in error messages on the screen or printout risks compromising the data and security of the system. The structure and content of error messages need to be carefully considered by the organization and development team.

Databases can inadvertently provide a wealth of information to an attacker through improperly handled error messages. In addition to sensitive business or personal information, database errors can provide host names, IP addresses, usernames, and other system information not required for troubleshooting but very useful to someone targeting the system.

Carefully consider the structure/content of error messages. The extent to which information systems are able to identify and handle error conditions is guided by organizational policy and operational requirements. Information that could be exploited by adversaries includes, for example, logon attempts with passwords entered by mistake as the username, mission/business information that can be derived from (if not stated explicitly by) information recorded, and personal information, such as account numbers, social security numbers, and credit card numbers.

This calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed and must document what has been discovered.

```
---
SV-271186:
Old:
```
Discretionary Access Control (DAC) is based on the notion that individual users are "owners" of objects and therefore have discretion over who should be authorized to access the object and in which mode (e.g., read or write). Ownership is usually acquired as a consequence of creating the object or via specified ownership assignment. DAC allows the owner to determine who will have access to objects they control. An example of DAC includes user-controlled table permissions.

When discretionary access control policies are implemented, subjects are not constrained with regard to what actions they can take with information for which they have already been granted access. Thus, subjects that have been granted access to information are not prevented from passing (i.e., the subjects have the discretion to pass) the information to other subjects or objects. 

A subject that is constrained in its operation by Mandatory Access Control policies is still able to operate under the less rigorous constraints of this requirement. Thus, while Mandatory Access Control imposes constraints preventing a subject from passing information to another subject operating at a different sensitivity level, this requirement permits the subject to pass the information to any subject at the same sensitivity level. 

The policy is bounded by the information system boundary. Once the information is passed outside of the control of the information system, additional means may be required to ensure the constraints remain in effect. While the older, more traditional definitions of discretionary access control require identity-based access control, that limitation is not required for this use of discretionary access control.

```
New:
```
DAC is based on the notion that individual users are "owners" of objects and therefore have discretion over who should be authorized to access the object and in which mode (e.g., read or write). Ownership is usually acquired because of creating the object or via specified ownership assignment. DAC allows the owner to determine who will have access to objects they control. An example of DAC includes user-controlled table permissions.

When discretionary access control policies are implemented, subjects are not constrained regarding what actions they can take with information for which they have already been granted access. Thus, subjects that have been granted access to information are not prevented from passing (i.e., the subjects have the discretion to pass) the information to other subjects or objects. 

A subject that is constrained in its operation by Mandatory Access Control policies is still able to operate under the less rigorous constraints of this requirement. Thus, while Mandatory Access Control imposes constraints preventing a subject from passing information to another subject operating at a different sensitivity level, this requirement permits the subject to pass the information to any subject at the same sensitivity level. 

The policy is limited by the information system boundary. Once the information is passed outside of the control of the information system, additional means may be required to ensure the constraints remain in effect. While the older, more traditional definitions of DAC require identity-based access control, that limitation is not required for this use of DAC.

```
---
SV-271188:
Old:
```
In certain situations, to provide required functionality, a DBMS needs to execute internal logic (stored procedures, functions, triggers, etc.) and/or external code modules with elevated privileges. However, if the privileges required for execution are at a higher level than the privileges assigned to organizational users invoking the functionality applications/programs, those users are indirectly provided with greater privileges than assigned by organizations.

Privilege elevation must be utilized only where necessary and protected from misuse.

```
New:
```
In certain situations, to provide required functionality, a DBMS needs to execute internal logic (stored procedures, functions, triggers, etc.) and/or external code modules with elevated privileges. However, if the privileges required for execution are at a higher level than the privileges assigned to organizational users invoking the functionality applications/programs, those users are indirectly provided with greater privileges than assigned by organizations.

Privilege elevation must be used only where necessary and protected from misuse.

This calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed and must document what has been discovered.

```
---
SV-271199:
Old:
```
Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.

It is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal laws, Executive Orders, directives, policies, regulations, and standards.

NSA-approved cryptography for classified networks is hardware based. This requirement addresses the compatibility of a DBMS with the encryption devices.

```
New:
```
Use of weak or untested encryption algorithms undermines the purposes of using encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.

It is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal laws, Executive Orders, directives, policies, regulations, and standards.

NSA-approved cryptography for classified networks is hardware based. This requirement addresses the compatibility of a DBMS with the encryption devices.

```
---
SV-271201:
Old:
```
If the application owner and Authorizing Official have
    determined that encryption of data at rest is NOT required, this is not a
    finding.

```
New:
```
DBMSs handling data requiring "data at rest" protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information at rest. These cryptographic mechanisms may be native to the DBMS or implemented via additional software or operating system/file system settings, as appropriate to the situation.

Selection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. The strength of the mechanism is commensurate with the security category and/or classification of the information. Organizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) or encrypt specific data structures (e.g., files, records, or fields).

The decision whether and what to encrypt rests with the data owner and is also influenced by the physical measures taken to secure the equipment and media on which the information resides.



```
---
</details>

Delta Process completed successfully

